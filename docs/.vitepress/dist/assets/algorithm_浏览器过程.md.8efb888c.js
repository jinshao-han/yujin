import{_ as s,c as a,o as n,a as l}from"./app.5146eedb.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"浏览器过程","slug":"浏览器过程","link":"#浏览器过程","children":[]},{"level":3,"title":"http 如何实现缓存","slug":"http-如何实现缓存","link":"#http-如何实现缓存","children":[]},{"level":3,"title":"从输入 URL 到页面加载完成的过程","slug":"从输入-url-到页面加载完成的过程","link":"#从输入-url-到页面加载完成的过程","children":[]},{"level":2,"title":"什么是浏览器同源策略？","slug":"什么是浏览器同源策略","link":"#什么是浏览器同源策略","children":[]},{"level":2,"title":"浏览器是如何渲染 UI 的？","slug":"浏览器是如何渲染-ui-的","link":"#浏览器是如何渲染-ui-的","children":[]},{"level":2,"title":"如何实现跨域？","slug":"如何实现跨域","link":"#如何实现跨域","children":[{"level":3,"title":"最经典的跨域方案 jsonp","slug":"最经典的跨域方案-jsonp","link":"#最经典的跨域方案-jsonp","children":[]},{"level":3,"title":"最流行的跨域方案 cors","slug":"最流行的跨域方案-cors","link":"#最流行的跨域方案-cors","children":[]},{"level":3,"title":"最方便的跨域方案 Nginx","slug":"最方便的跨域方案-nginx","link":"#最方便的跨域方案-nginx","children":[]}]}],"relativePath":"algorithm/浏览器过程.md","lastUpdated":null}'),p={name:"algorithm/浏览器过程.md"},o=l(`<h3 id="浏览器过程" tabindex="-1">浏览器过程 <a class="header-anchor" href="#浏览器过程" aria-hidden="true">#</a></h3><p>浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header ，以供下次加载时对比使用;</p><p>下一次加载资源时，由于强缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age, 则没有过期，并命中强缓存，直接从本地读取资源，如果浏览器不支持 http1.1，则使用 expires 判断是否过期；</p><p>如果资源已经过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 if-None-Match 和 if-Modified-Since 的请求</p><p>服务器收到请求后，优先根据 Eatg 的值判断请求的文件有没有被修改，Eatg 的值一致则没有修改，命中协商缓存，返回 304 ，不一致则返回新的 last-modified 和 文件并返回 200</p><p>1、强缓存 使用强缓存策略时、如果缓存资源有效，则直接使用强缓存策略，不必再向服务器发起请求、强缓存策略可以通过两个方式设置，分别是 http 头信息中的 Expires 属性和 Cache-control 属性</p><p>2、协商缓存 如果命中协商缓存，则无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，而且设置了协商缓存，这个时候协商缓存就会发挥作用； 命中协商缓存的条件有两个：</p><p>max-age = XXX 过期了</p><p>值为 no-store</p><p>使用协商缓存的策略时，先会向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 的状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。</p><h3 id="http-如何实现缓存" tabindex="-1">http 如何实现缓存 <a class="header-anchor" href="#http-如何实现缓存" aria-hidden="true">#</a></h3><ol><li><strong>强缓存</strong>==&gt;Expires(过期时间)/Cache-Control(no-cache)(优先级高) 协商缓存 ==&gt;Last-Modified/Etag(优先级高)Etag 适用于经常改变的小文件 Last-Modefied 适用于不怎么经常改变的大文件</li><li><strong>强缓存策略和协商缓存策略</strong>在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。</li></ol><h3 id="从输入-url-到页面加载完成的过程" tabindex="-1"><code>从输入 URL 到页面加载完成的过程</code> <a class="header-anchor" href="#从输入-url-到页面加载完成的过程" aria-hidden="true">#</a></h3><p><strong>建立 TCP 连接-&gt;发送请求行-&gt;发送请求头-&gt;（到达服务器）发送状态行-&gt;发送响应头-&gt;发送响应数据-&gt;断 TCP 连接</strong></p><h2 id="什么是浏览器同源策略" tabindex="-1">什么是浏览器同源策略？ <a class="header-anchor" href="#什么是浏览器同源策略" aria-hidden="true">#</a></h2><p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p><p>同源是指&quot;协议+域名+端口&quot;三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。 浏览器中的大部分内容都是受同源策略限制的，但是以下三个标签可以不受限制：</p><ul><li><code>&lt;img src=XXX&gt;</code></li><li><code>&lt;link href=XXX&gt;</code></li><li><code>&lt;script src=XXX&gt;</code></li></ul><h2 id="浏览器是如何渲染-ui-的" tabindex="-1">浏览器是如何渲染 UI 的？ <a class="header-anchor" href="#浏览器是如何渲染-ui-的" aria-hidden="true">#</a></h2><ol><li>浏览器获取 HTML 文件，然后对文件进行解析，形成 DOM Tree</li><li>与此同时，进行 CSS 解析，生成 Style Rules</li><li>接着将 DOM Tree 与 Style Rules 合成为 Render Tree</li><li>接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标</li><li>随后调用 GPU 进行绘制（Paint），遍历 Render Tree 的节点，并将元素呈现出来</li></ol><h2 id="如何实现跨域" tabindex="-1">如何实现跨域？ <a class="header-anchor" href="#如何实现跨域" aria-hidden="true">#</a></h2><p>跨域是个比较古老的命题了，历史上跨域的实现手段有很多，我们现在主要介绍三种比较主流的跨域方案，其余的方案我们就不深入讨论了，因为使用场景很少，也没必要记这么多奇技淫巧。</p><h3 id="最经典的跨域方案-jsonp" tabindex="-1">最经典的跨域方案 jsonp <a class="header-anchor" href="#最经典的跨域方案-jsonp" aria-hidden="true">#</a></h3><p>jsonp 本质上是一个 Hack，它利用<code>&lt;script&gt;</code>标签不受同源策略限制的特性进行跨域操作。</p><p>jsonp 优点：</p><ul><li>实现简单</li><li>兼容性非常好</li></ul><p>jsonp 的缺点：</p><ul><li>只支持 get 请求（因为<code>&lt;script&gt;</code>标签只能 get）</li><li>有安全性问题，容易遭受 xss 攻击</li><li>需要服务端配合 jsonp 进行一定程度的改造</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro vp-code-dark"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">JSONP</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;font-style:italic;">url</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">params</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callbackKey</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">callback</span><span style="color:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在参数里制定 callback 的名字</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">callbackKey</span><span style="color:#ABB2BF;">] </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;jsonpCallback&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 预留 callback</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">jsonpCallback</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">callback</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 拼接参数字符串</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">paramKeys</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">keys</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">paramString</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">paramKeys</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">map</span><span style="color:#ABB2BF;">((</span><span style="color:#E06C75;font-style:italic;">key</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">key</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">=</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">[</span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">]</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">join</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&amp;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 插入 DOM 元素</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createElement</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;script&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">script</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setAttribute</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;src&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">\`</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">url</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">?</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">paramString</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">document</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">body</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">appendChild</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">JSONP</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;http://s.weibo.com/ajax/jsonp/suggestion&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">params</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">key</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">callbackKey</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;_cb&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">callback</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">result</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">result</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span></code></pre><pre class="shiki min-dark vp-code-light"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> JSONP({ url</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> params</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> callbackKey</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> callback }) {</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 在参数里制定 callback 的名字</span></span>
<span class="line"><span style="color:#B392F0;">  params </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> params </span><span style="color:#F97583;">||</span><span style="color:#B392F0;"> {}</span></span>
<span class="line"><span style="color:#B392F0;">  params[callbackKey] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;jsonpCallback&#39;</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 预留 callback</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">window</span><span style="color:#B392F0;">.jsonpCallback </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> callback</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 拼接参数字符串</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">paramKeys</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">Object</span><span style="color:#B392F0;">.keys(params)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">paramString</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">paramKeys</span><span style="color:#B392F0;">.map((key) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">key</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">=</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">params[key]</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">).join(</span><span style="color:#FFAB70;">&#39;&amp;&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#6B737C;">// 插入 DOM 元素</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#F97583;">const</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">script</span><span style="color:#B392F0;"> </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.createElement(</span><span style="color:#FFAB70;">&#39;script&#39;</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">script</span><span style="color:#B392F0;">.setAttribute(</span><span style="color:#FFAB70;">&#39;src&#39;</span><span style="color:#BBBBBB;">,</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">\`</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">url</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">?</span><span style="color:#F97583;">\${</span><span style="color:#B392F0;">paramString</span><span style="color:#F97583;">}</span><span style="color:#FFAB70;">\`</span><span style="color:#B392F0;">)</span></span>
<span class="line"><span style="color:#B392F0;">  </span><span style="color:#79B8FF;">document</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">body</span><span style="color:#B392F0;">.appendChild(script)</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">JSONP({</span></span>
<span class="line"><span style="color:#B392F0;">  url</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;http://s.weibo.com/ajax/jsonp/suggestion&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  params</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;test&#39;</span></span>
<span class="line"><span style="color:#B392F0;">  }</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  callbackKey</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> </span><span style="color:#FFAB70;">&#39;_cb&#39;</span><span style="color:#BBBBBB;">,</span></span>
<span class="line"><span style="color:#B392F0;">  callback(result) {</span></span>
<span class="line"><span style="color:#B392F0;">    </span><span style="color:#79B8FF;">console</span><span style="color:#B392F0;">.log(</span><span style="color:#79B8FF;">result</span><span style="color:#B392F0;">.data)</span></span>
<span class="line"><span style="color:#B392F0;">  }</span></span>
<span class="line"><span style="color:#B392F0;">})</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h3 id="最流行的跨域方案-cors" tabindex="-1">最流行的跨域方案 cors <a class="header-anchor" href="#最流行的跨域方案-cors" aria-hidden="true">#</a></h3><p>cors 是目前主流的跨域解决方案，跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。</p><h3 id="最方便的跨域方案-nginx" tabindex="-1">最方便的跨域方案 Nginx <a class="header-anchor" href="#最方便的跨域方案-nginx" aria-hidden="true">#</a></h3><p>nginx 是一款极其强大的 web 服务器，其优点就是轻量级、启动快、高并发。</p><p>现在的新项目中 nginx 几乎是首选，我们用 node 或者 java 开发的服务通常都需要经过 nginx 的反向代理。</p>`,34),e=[o];function c(r,t,B,y,i,F){return n(),a("div",null,e)}const b=s(p,[["render",c]]);export{A as __pageData,b as default};
